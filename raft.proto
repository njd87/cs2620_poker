syntax = "proto3";
package raft;


service RaftService {
    rpc Vote(VoteRequest) returns (VoteResponse);
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc GetLeader(GetLeaderRequest) returns (GetLeaderResponse);
}

// request votes from other raft
message VoteRequest {
    int32 term = 1;
    int32 candidate_id = 2;
    int32 last_log_index = 3;
    int32 last_log_term = 4;
}

// vote responses
message VoteResponse {
    int32 term = 1;
    bool vote_granted = 2;
}


// append entries to other raft
message AppendEntriesRequest {
    int32 term = 1;
    string leader_address = 2;
    // last log index
    int32 most_recent_log_idx = 3;
    int32 term_of_recent_log = 4;
    repeated LogEntry entries = 5;
    // last "committed" index expected from the followers
    int32 leader_commit = 6;
}

message AppendEntriesResponse {
    int32 term = 1;
    bool success = 2;
}

// Define the different types of actions.
enum Action {
    UNKNOWN = 0;
    LOGIN = 1;
    REGISTER = 2;
    CHECK_USERNAME = 3;
    VIEW_HISTORY = 4;
    LOAD_MONEY = 5;
    QUEUE = 6;
    DELETE_ACCOUNT = 7;
    CONNECT = 8;
    JOIN_LOBBY = 9;
    CONNECT_LOBBY = 10;
  }
  
  enum GameType {
    NONE = 0;
    TEXAS = 1;
    FIVE_HAND = 2;
  }

// commands from chat.proto
message LogEntry {
// Define the action from enum
Action action = 1;

// username + passhash used for creating an deleting accounts
string username = 2;
string passhash = 3;
int32 money_to_add = 4;
int32 game_type = 5;
int32 term = 6;
}

// for clients, get leader
// parameter is useless
message GetLeaderRequest {
    bool useless = 1;
}

message GetLeaderResponse {
    string leader_address = 1;
}